package com.spark.dto;

import java.util.Date;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;

@Data
public class UserDTO {
    
    @NotBlank(message = "아이디를 입력하세요.")
    @Size(min = 4, max = 20, message = "아이디는 4-20자 사이여야 합니다.")
    private String user_id; // React에서 보내는 필드명과 일치
    
    @NotBlank(message = "비밀번호를 입력하세요.")
    @Size(min = 8, message = "비밀번호는 8자 이상이어야 합니다.")
    private String pw; // React에서 보내는 필드명과 일치
    
    // ✅ 비밀번호 확인 필드 추가
    private String confirmPassword; // React에서 보내는 필드명과 일치
    
    @NotBlank(message = "이름을 입력하세요.")
    private String name;
    
    @NotBlank(message = "기본주소를 입력하세요.")
    private String address1; // React에서 보내는 필드명과 일치
    
    private String address2; // React에서 보내는 필드명과 일치
    
    @NotBlank(message = "우편번호를 입력하세요.")
    private String addressnum; // ✅ DB 컬럼명과 일치 (s 1개)
    
    @NotNull(message = "생년월일을 입력하세요.")
    private Date birthday; // React에서 보내는 필드명과 일치
    
    @NotBlank(message = "전화번호를 입력하세요.")
    @Pattern(regexp = "^010-\\d{4}-\\d{4}$", message = "전화번호 형식이 올바르지 않습니다.")
    private String phone;
    
    private String position; // 권한 (Service에서 설정)
    
    @NotBlank(message = "이메일을 입력하세요.")
    @Email(message = "이메일 형식이 올바르지 않습니다.")
    private String email;
    
    private String img; // 사진
    
    // ✅ 비밀번호 확인 검증 메서드
    public boolean isPasswordMatching() {
        if (pw == null || confirmPassword == null) {
            return false;
        }
        return pw.equals(confirmPassword);
    }
    
    // ✅ 비밀번호 유효성 검사
    public boolean isPasswordValid() {
        return pw != null && pw.length() >= 8;
    }
}